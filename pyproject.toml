# Build Configuration
[build-system]
requires = ["hatchling>=1.8.0"]
build-backend = "hatchling.build"

# Project Metadata
[project]
name = "email-adapt"
version = "0.0.1"
description = "Generate personalized emails based on the user's writing tone and style."
readme = "README.md"
requires-python = ">=3.8,<3.13"
license = "MIT"
authors = [
    { name = "Mohamed Sriha", email = "medsriha@gmail.com" },
]
dependencies = [
    "requests>=2.28.0",
    "google-api-python-client>=2.156.0",
    "google-auth-httplib2>=0.2.0",
    "google-auth-oauthlib>=1.2.1",
    "tiktoken>=0.8.0",
    "haystack-ai>=2.8.0",
    "sentence-transformers>=3.3.1",
    "qdrant-client>=1.12.2",
    "python-dotenv>=1.0.1",
    "crewai>=0.95.0",
    "beautifulsoup4>=4.12.3",
]

# Development Dependencies
[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "black>=23.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "types-requests>=2.28.0",
    "types-google-auth>=3.0.0",
    "types-google-auth-oauthlib>=1.0.0",
]

# Build Configuration
[tool.hatch.build.targets.wheel]
packages = ["email_adapt"]

# Environment Configurations
[tool.hatch.envs.default]
dependencies = [
    "ruff>=0.1.0",
]

[tool.hatch.envs.default.scripts]
check = "ruff check {args}"
fix = "ruff check --fix {args}"
unsafe-fix = "ruff check --unsafe-fixes {args}"
format = "ruff format {args}"
format-check = "ruff format --check {args}"

[tool.hatch.envs.test]
dependencies = [
    "pytest>=7.0",
    "mypy>=1.0",
    "pytest-cov>=4.1.0",
    "pylint>=3.0.0",
]

[tool.hatch.envs.test.scripts]
e2e = "pytest e2e"
unit = 'pytest --cov-report xml:coverage.xml --cov="email_adapt" -m "not integration" {args:test}'
integration = 'pytest --maxfail=5 -m "integration" {args:test}'
integration-mac = 'pytest --maxfail=5 -m "integration" -k "not tika" {args:test}'
integration-windows = 'pytest --maxfail=5 -m "integration" -k "not tika" {args:test}'
types = "mypy email_adapt --non-interactive --install-types"
lint = "pylint -ry -j 0 {args:email_adapt}"

# Code Formatting Tools
[tool.black]
line-length = 120
target-version = ["py38"]

[tool.isort]
profile = "black"
multi_line_output = 3

# Type Checking
[tool.mypy]
python_version = "3.8"
strict = true
ignore_missing_imports = true
cache_dir = ".mypy_cache"
namespace_packages = true
explicit_package_bases = true
mypy_path = "email_adapt"

[tool.ruff]
line-length = 120
target-version = "py38"

select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "D",   # pydocstyle
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "RUF", # Ruff-specific rules
]

# Exclude some directories
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "build",
    "dist",
]
# Ignore specific rules

ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
]


[tool.ruff.per-file-ignores]
"tests/**/*" = ["D", "ANN"]  # Ignore docstring and annotation rules in tests

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-first-party = ["email-adapt"]
